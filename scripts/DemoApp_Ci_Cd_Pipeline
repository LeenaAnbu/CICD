def slackChannel = "#general"

node() {
	deleteDir()
	try {
		stage("SCM Code Checkout") {
			checkoutGit('master', "DemoJavaApp", "https://github.com/RamKannan91/DemoJavaApp.git")
        }

	    stage("Maven Build") {
    	    withMaven(maven: 'maven3') {
    	       sh "cd DemoJavaApp/ ; mvn clean install"
    	    }
	    }

	    stage("Upload Artifacts") {
	        withMaven(maven: 'maven3') {
	    	    sh "cd DemoJavaApp/ ; mvn deploy:deploy-file -DgroupId=workshop -DartifactId=DemoApp -Dversion=1.0.2-SNAPSHOT -DgeneratePom=true -Dpackaging=war -DrepositoryId=maven-snapshots -Durl=http://localhost:8081/repository/maven-snapshots/ -DpomFile=pom.xml -Dfile=target/MavenWebApp.war"
	        }
	   }

	    stage("Direct Deploy") {
	    	withMaven(maven: 'maven3') {
	    	    sh """mvn dependency:get -DremoteRepositories=http://localhost:8081/repository/maven-snapshots -DgroupId=workshop -DartifactId=DemoApp -Dversion=1.0.2-SNAPSHOT -Dtransitive=false -Dpackaging=war
	    	    	  mvn dependency:copy -Dtype=war -Dartifact=workshop:DemoApp:1.0.2-SNAPSHOT:war  -DoutputDirectory=/opt/tomcat/webapps/
				"""
	        }
	    }

	    stage("Ansible Deploy") {
        	sh "ansible-playbook DemoJavaApp/scripts/deployWar.yml --connection=local -e nexus_path='${env.NEXUS_URL}' -e tomcat_path='${env.TOMCAT_PATH}'"
	    }

	    stage("Docker Deploy") {
	      	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'dockerCloud', usernameVariable: 'userId', passwordVariable: 'passwd']]) {
	            dir("DemoJavaApp") {
			sh """
				docker build . -t ramkannan91/demojavaapp -f scripts/Dockerfile
				docker login -u ${userId} -p ${passwd} docker.io
				docker push ramkannan91/demojavaapp:latest
				docker ps -a | awk '{ print \$1,\$2 }' | grep demojavaapp | awk '{print \$1 }' | xargs -I {} docker rm {} --force
				docker run -d -p 8085:8086 ramkannan91/demojavaapp:latest
				export containerId=\$(docker ps -a | grep ramkannan91/demojavaapp:latest | awk '{print \$1}')
				docker exec \$containerId sh -c "/usr/local/tomcat/bin/startup.sh"
	           	"""
	            }
	        }
	    }

	    stage("Run Tests") {

	    }

	    stage("Post Build") {
	    	currentBuild.displayName = "DevEnv-${env.BUILD_NUMBER}" 
	    	slackSuccess(slackChannel)
	    }
    } catch (err) {
        println("================ ERROR: ${err}")
		currentBuild.displayName = "DevEnv-${env.BUILD_NUMBER}" 
    	slackFailure(slackChannel)
        currentBuild.result = "FAILURE"
        error()
    }
}

def checkoutGit(branchName, targetDir, repoURL) {
    checkout([$class: 'GitSCM',
      branches: [[name: branchName]],
      doGenerateSubmoduleConfigurations: false,
      extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: targetDir]],
      submoduleCfg: [],
      userRemoteConfigs: [[credentialsId: 'git-stash-commoncloud-jenkins', url: repoURL]]
    ])
}

def slackSuccess(slackChannel) {
    slackSend (
        channel: slackChannel,
        color: "#008000",
        message: ":blush: *SUCCESS*\nDeployment Completed")
}

def slackFailure(slackChannel) {
    slackSend (
        channel: slackChannel,
        color: "#FF0000",
        message: ":dizzy_face: *FAILURE*\nDeployment Failed")
}
